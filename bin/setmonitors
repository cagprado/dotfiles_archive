#!/usr/bin/env python3

import re
from os import environ, listdir, path
from time import sleep
from zlib import crc32
from codecs import encode, decode
from argparse import ArgumentParser
from subprocess import run
hidpi_threshold = 180


def main():
    parser = ArgumentParser(
        description='''Set monitor output based on previous configuration or
        save current configuration.  Without arguments it will try to set the
        monitors using some previously stored configuration or set sane
        defaults if none is found.''')
    parser.add_argument(
        '-s', action='store_true',
        help='''Change the behaviour of the program in that it will save the
        currently in use configuration of the monitors for later use.''')
    parser.add_argument(
        '-d', action='store_true',
        help='''Force a time delay before doing anything''')
    args = parser.parse_args()
    args.d and sleep(1)

    if args.s:
        Configuration.save()

    else:
        Configuration.load() or Configuration.new()
        Configuration.set()


class Configuration:
    """List of monitors to configure"""
    id = None

    @classmethod
    def build(cls):
        cls.filename = __import__(__name__).__file__
        cls.monitors = build_monitor_list()
        cls.id = sum([s.edid for s in cls.monitors])
        return cls.id

    @classmethod
    def load(cls):
        id = cls.id or cls.build()
        with open(cls.filename) as f:
            cfg = re.search(f'# setup: {id};[^\n]*', f.read())

        if cfg:
            cfg = [x.split(':') for x in cfg[0].split(';')[1:]]
            devices = [int(x[0]) for x in cfg]
            for m in cls.monitors:
                m.device and m.update(*cfg[devices.index(m.edid)][1:])
            return True

    @classmethod
    def save(cls):
        id = cls.id or cls.build()
        tag = f'# setup: {id};'
        cfg = tag + ';'.join(repr(m) for m in cls.monitors if m.enabled)

        with open(cls.filename) as f:
            src, n = re.subn(f'{tag}[^\n]*', cfg, f.read())
            src += f'{cfg}\n' if not n else ''
        with open(cls.filename, 'w') as f:
            f.write(src)

    @classmethod
    def new(cls):
        position = max([m.rightborder for m in cls.monitors if m.enabled])
        for m in cls.monitors:
            if m.available:
                position = m.defaults(position)

    @classmethod
    def set(cls):
        command = ['xrandr', '--dpi']
        command += [str(i.dpi) for i in cls.monitors if i.primary]
        command += [j for i in cls.monitors for j in i.xrandr.split()]
        run(command)

        # set DPI in Xresources
        with open(environ['HOME'] + '/.Xresources', 'w') as f:
            f.write(f'*.dpi: {command[2]}\n')
        print(int(command[2]) > hidpi_threshold and 'true' or 'false')

        # set wallpapers
        run([environ['HOME'] + '/.fehbg'])


class Monitor:
    """Describes the properties of monitors available to the system"""

    def __init__(self, name, edid=0, device=None, primary=None, dpi=None,
                 position=None, mode=[None, None], scale=None, rotation=None):
        """Initialize Monitor object"""
        self.name = name
        self.edid = edid
        self.device = device
        self.primary = primary
        self.dpi = dpi
        self.position = position
        self.mode = mode[0]
        self.pref = mode[1]
        self.scale = scale
        self.rotation = rotation

    @property
    def available(self):
        return bool(self.device) and not self.enabled

    @property
    def enabled(self):
        return bool(self.mode)

    @property
    def hidpi(self):
        return self.dpi and self.dpi > hidpi_threshold and '(HiDPI)' or ''

    @property
    def rightborder(self):
        return (self.rotation in ['left', 'right']
                and self.mode[1] or self.mode[0]) + self.position[0]

    @property
    def xrandr(self):
        if self.enabled:
            return (f'--output {self.name} --rotate {self.rotation} '
                    f'--pos {self.position[0]}x{self.position[1]} '
                    f'--mode {self.mode[0]}x{self.mode[1]} '
                    f'--scale {self.scale[0]}x{self.scale[1]}'
                    + (self.primary and ' --primary' or ''))
        return f'--output {self.name} --off'

    def __lt__(self, other):
        return self.edid < other.edid

    def __repr__(self):
        return ':'.join([str(i) for i in [
            self.edid, self.primary, self.dpi,
            self.position, self.mode, self.scale, self.rotation]])

    def __str__(self):
        """Returns the string representation of a Monitor object"""
        output = f'{self.name}:\n - Enabled:\t'
        if self.enabled:
            output += (
                'Yes\n'
                f' - Primary:  \t{self.primary}\n'
                f' - DPI:      \t{self.dpi} {self.hidpi}\n'
                f' - Mode:     \t{self.mode[0]}x{self.mode[1]}\n'
                f' - Position: \t{self.position[0]}x{self.position[1]}\n'
                f' - Scale:    \t{self.scale[0]}x{self.scale[1]}\n'
                f' - Rotation: \t{self.rotation}\n')
        else:
            output += 'No\n'
        return output

    def update(self, primary, dpi, position, mode, scale, rotation):
        self.primary = eval(primary)
        self.dpi = eval(dpi)
        self.position = eval(position)
        self.mode = eval(mode)
        self.scale = eval(scale)
        self.rotation = rotation

    def defaults(self, position):
        self.position = (position, 0)
        self.mode = self.pref
        self.scale = (1, 1)
        self.rotation = 'normal'
        return self.rightborder


def normalize_edid(edid):
    edid = ''.join(str(encode(edid, 'base64'), 'ascii').split())
    return crc32(encode(edid))


def get_system_devices():
    devices = {}
    syspath = '/sys/class/drm/'
    for device in listdir(syspath):
        filename = syspath + device + '/edid'
        if path.isfile(filename):
            with open(filename, 'rb') as f:
                edid = normalize_edid(f.read())
            if edid:
                devices[edid] = device
    return devices


def get_xorg_dpi():
    xdpyinfo = run(['xdpyinfo'], capture_output=True, text=True).stdout
    return eval(re.search(r'resolution:\s+(\d+)x(\d+)', xdpyinfo).group(1))


def xrandr_main_info(monitors, match):
    if match:
        monitors.append([match[1]])
        m = monitors[-1]
        if not match[2]:
            m.append(match[3] == 'primary')
            m.append(get_xorg_dpi())
            if not match[4]:
                m += [None, [None]]
            else:
                m.append(tuple(int(x) for x in match.group(6, 7)))
                m.append([tuple(sorted((int(x) for x in match.group(4, 5)),
                                       reverse=True))])
                m.append(match[8] or 'normal')
        return True


def xrandr_edid_info(monitors, line, devices):
    if 'EDID:' in line:
        edid = normalize_edid(decode(line.split()[1], 'hex'))
        monitors[-1][1:1] = [edid, devices[edid]]
        return True


def xrandr_true_resolution(monitors, line):
    if line.startswith('   ') and ('*' in line or '+' in line):
        modes = monitors[-1][6]
        match = re.search(r'(\d+)x(\d+).*[+]', line)
        match and modes.append(tuple(int(x) for x in match.groups()))

        match = re.search(r'(\d+)x(\d+).*[*]', line)
        if match:
            real_mode = tuple(int(x) for x in match.groups())
            scale = tuple(x/y for x, y in zip(modes[0], real_mode))
            if monitors[-1][7] in ['left', 'right']:
                scale = (scale[1], scale[0])
            modes[0] = real_mode
            monitors[-1].insert(7, scale)

        return True


def build_monitor_list():
    devices = get_system_devices()
    xrandr = run(['xrandr', '--prop'], capture_output=True, text=True)
    xrandr = xrandr.stdout.replace('\n\t\t', '').splitlines()

    pattern = re.compile(r'(\w+) (dis)?connected ?(primary)? (?:(\d+)x(\d+)[+]'
                         r'(\d+)[+](\d+) ?(\w+)?)?')

    monitors = []
    for line in xrandr:
        (xrandr_main_info(monitors, re.match(pattern, line))
         or xrandr_edid_info(monitors, line, devices)
         or xrandr_true_resolution(monitors, line))

    return sorted([Monitor(*m) for m in monitors])


exit(main())
# setup: 2256794240;2256794240:True:259:(0, 0):(3000, 2000):(1.0, 1.0):normal
# setup: 5532027795;2256794240:True:259:(0, 0):(3000, 2000):(1.0, 1.0):normal;3275233555:False:259:(3000, 0):(1360, 768):(2.0, 2.0):normal
