#!/bin/zsh

autoload +X parse_cmdline help err war

# Configuration
local SCREEN_EDID="$HOME/etc/screen_edid"
local PRIORITY='eDP1 DP1 DP2 eDP-1 DP-1 DP-2 eDP-1-1 DP-1-1 DP-1-2'

local USAGE="%Busage:%b $0 [option] [RESOLUTION...]"
local DESC="Set resolution and positon of multiple monitors in X."
local LONGHELP
LONGHELP=$(<<END
Default behaviour enables all connected outputs to their preferred resolution
and different workspaces side-by-side.  It sets the DPI according to the
available list of DPI, otherwise it fallsback to 96.
These options change the default:
  %B-s%b
      Single mode: Activates all connected outputs to their preferred
      resolution but clone the workspace on all of them.
  %B-p 'NAMES...'%b
      Set the preference order of monitors as a space separated list given as
      a single string to the shell.
  %B[RESOLUTION...]%b
      Force the resolution for a given output instead of choosing the
      preferrable one.  This space separated list follows the same order as
      the preference list.

%BKNOWN ISSUES%b
  This script has only been tested with a maximum of two available monitors.
  It may result in unexpected behaviour when using more monitors.
END
)

# PARSE COMMAND LINE OPTIONS
local HELP=false
local SUMMARY=false
local SINGLE=false
local -a RESOLUTION
if ! parse_cmdline '=RESOLUTION h|help|long-help>HELP H|short-help|summary>SUMMARY s>SINGLE :p>PRIORITY' $@; then
  print -P "$USAGE"
  return 1
fi
help $HELP $SUMMARY $0 $USAGE $DESC $LONGHELP && return

# Order lists based on chosen configuration
if [[ "$SINGLE" = "true" ]]; then
  RESOLUTION=(${(Oa)RESOLUTION})
  PRIORITY=(${(Oa)=PRIORITY})
else
  PRIORITY=($=PRIORITY)
fi

# Get list of monitors
local MONITORS=$(xrandr -q | sed -n '
  s/^\([^ ]*\) \(connected\).*/\1/p
  s/^\([^ ]*\) \(disconnected\).*/--output \1 --off/p
  s/^ *\([0-9]*x[0-9]*\).*[+][^VH]*$/\1/p
')
MONITORS=(${(f)MONITORS})  # (f) split at \n

# Look for the primary monitor
local ITEM IDX PRIMARY PRIMARY_RESOLUTION
for ITEM in $PRIORITY; do
  IDX=${MONITORS[(i)${ITEM}]}
  if [[ $IDX -le $#MONITORS ]]; then
    PRIMARY=$MONITORS[$IDX]

    [[ -z "$RESOLUTION[1]" ]] && RESOLUTION[1]=("$MONITORS[$((IDX+1))]")
    MONITORS[$((IDX+1))]=()
    PRIMARY_RESOLUTION=$RESOLUTION[1]

    # Build command
    MONITORS[$IDX]=("--output $PRIMARY --mode $RESOLUTION[1] --scale 1x1 --primary")
    RESOLUTION[1]=()
    break
  fi
done

# get DPI of primary monitor
local EDID=$(hexdump -ve '1/1 "%x"' /sys/class/drm/card?-${PRIMARY%%[^A-Za-z]*}-${PRIMARY: -1}/edid)
local DPI=$(grep "$EDID" "$SCREEN_EDID" | awk '{print $2}')
[[ -z "$DPI" ]] && DPI="96"
echo $DPI

# Setup other screens
IDX=1
while [[ $IDX -le $#MONITORS ]]; do
  if [[ ! "$MONITORS[$IDX]" =~ "--output" ]]; then
    [[ -z "$RESOLUTION[1]" ]] && RESOLUTION[1]=("$MONITORS[$((IDX+1))]")
    MONITORS[$((IDX+1))]=()

    # Build command
    local AUX=$MONITORS[$IDX]
    if [[ "$SINGLE" = "true" ]]; then
      MONITORS[$IDX]=("--output $MONITORS[$IDX] --mode $RESOLUTION[1] --scale-from $PRIMARY_RESOLUTION --same-as $PRIMARY")
    else
      MONITORS[$IDX]=("--output $MONITORS[$IDX] --mode $RESOLUTION[1] --scale 1x1 --left-of $PRIMARY")
    fi
    PRIMARY=$AUX
  fi
  ((IDX+=1))
done

# run command and update screens
xrandr --dpi $DPI $=MONITORS
feh --bg-fill $HOME/usr/me/pictures/wallpaper/current
