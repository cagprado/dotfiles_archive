#!/bin/zsh

# CONFIGURATION #############################################################
local HOSTNAME=$(hostname)

if [[ "$HOSTNAME" = "mredson" ]]; then
  local MAINMONITOR="VGA"
elif [[ "$HOSTNAME" = "msedna" ]]; then
  local MAINMONITOR="DVI"
elif [[ "$HOSTNAME" = "caiopc" ]]; then
  local MAINMONITOR="LVDS"
fi
#############################################################################

autoload +X parse_cmdline help err war

local USAGE="%Busage:%b $0 [option]"
local DESC="Set resolution and positon of multiple monitors in X."
local LONGHELP=$(<<END
Default behaviour is to check all connected monitors and set them to their
preferred behaviour. This can be changed with the available options:
  %B-s%b
      Single mode: This is default when a single monitor is connected. If
      multiple options are available, assume the first one that is not the
      laptop screen, useful for a TV setup.
  %B-x%b
      Clone mode: All screens will have the same output. Resolution is scaled
      for different resolution monitors.

%BKNOWN ISSUES%b
  This script has only been tested with a maximum of two available monitors.
  It may result in unexpected behaviour when using more monitors.
END
)

local HELP=false
local SUMMARY=false
local SINGLE=false
local CLONE=false
local -a MONITORS PRIORITY
if ! parse_cmdline 'h|help|long-help>HELP H|short-help|summary>SUMMARY s>SINGLE x>CLONE' $@; then
  print -P "$USAGE"
  return 1
fi
help $HELP $SUMMARY $0 $USAGE $DESC $LONGHELP && return

local PRIORITY=("HDMI" "DVI" "VGA")

if [[ "$SINGLE" == "true" || "$CLONE" == "true" ]]; then
  # Single (forced), laptop is fallback
  PRIORITY+=$MAINMONITOR
else
  # Auto (multiple monitors, or no external monitor), primary is laptop
  PRIORITY=($MAINMONITOR $PRIORITY)
fi

if [[ "$CLONE" == "true" ]]; then
  [[ "$SINGLE" == "true" ]] && war "Clone mode used, ignoring -s flag..."
  MONITORS=$(xrandr -q | sed -n -e 's/^\([^ ]*\) \(disconnected\).*/--output \1 --off/p' -e 's/^\([^ ]*\) \(connected\).*/--output \1 --scale 1x1 --auto/p' -e 's/^ *\([0-9]*\)x\([0-9]*\) .*[+]$/\1\n\2/p')
  MONITORS=(${(f)MONITORS})  # (f) split at \n

  # Look for the primary monitor
  local ITEM IDX PRIMARY X0 Y0 X Y
  for ITEM in $PRIORITY; do
    IDX=${MONITORS[(i)*${ITEM}*--auto]}
    if [[ $IDX -le $#MONITORS ]]; then
      MONITORS[$IDX]+=' --primary'
      PRIMARY=${${${MONITORS[$IDX]}#--output }%--scale*}
      # Get primary resolution values
      Y0="$MONITORS[$((IDX+2))]."
      MONITORS[$((IDX+2))]=()
      X0="$MONITORS[$((IDX+1))]."
      MONITORS[$((IDX+1))]=()
      break
    fi
  done

  # Set scale for the other monitors
  for ITEM in $MONITORS; do
    if [[ "$ITEM" =~ "--auto$" ]]; then
      IDX=${MONITORS[(i)*$ITEM]}
      Y="${MONITORS[$((IDX+2))]}"
      MONITORS[$((IDX+2))]=()
      X="${MONITORS[$((IDX+1))]}"
      MONITORS[$((IDX+1))]=()
      MONITORS[$IDX]="${${MONITORS[$IDX]}/1x1/$((X0/X))x$((Y0/Y))} --same-as $PRIMARY"
    fi
  done

  xrandr $=MONITORS
else
  # Parse list of available monitors
  MONITORS=$(xrandr -q | sed -n -e 's/^\([^ ]*\) \(disconnected\).*/--output \1 --off/p' -e 's/^\([^ ]*\) \(connected\).*/--output \1 --scale 1x1 --auto/p')
  MONITORS=(${(f)MONITORS})  # (f) split at \n

  # Look for the primary monitor
  local ITEM PRIMARY
  for ITEM in $PRIORITY; do
    local IDX=${MONITORS[(i)*${ITEM}*--auto]}
    if [[ $IDX -le $#MONITORS ]]; then
      MONITORS[$IDX]+=' --primary'
      PRIMARY=${${${MONITORS[$IDX]}#--output }%--scale*}
      break
    fi
  done

  # If single mode is used turn off all but priority
  [[ $SINGLE = "true" ]] && MONITORS=(${MONITORS/%--auto/--off})

  # Set position of secondary monitor
  MONITORS=(${MONITORS/%--auto/--auto --right-of $PRIMARY})

  xrandr $=MONITORS
fi
