#!/bin/zsh

autoload +X parse_cmdline help err war

local USAGE="%Busage:%b $0 [option] [RESOLUTION...]"
local DESC="Set resolution and positon of multiple monitors in X."
local LONGHELP
LONGHELP=$(<<END
Default behaviour is to check all connected monitors and set them to their
preferred resolution and clone.
  %B-m%b
      Multihead mode: Activate all connected monitors to their preferred
      resolution and different workspaces.
      Without this option, all screens will share the same workspace.
  %B-p 'NAMES...'%b
      Set the preference order of monitors (single string with space separated
      list.
  %B[RESOLUTION...]%b
      Force the resolution given in command line. List is applied in the same
      as the preferred order.

%BKNOWN ISSUES%b
  This script has only been tested with a maximum of two available monitors.
  It may result in unexpected behaviour when using more monitors.
END
)

# PARSE COMMAND LINE OPTIONS
local HELP=false
local SUMMARY=false
local MULTIPLE=false
local PRIORITY
local -a RESOLUTION
if ! parse_cmdline '=RESOLUTION h|help|long-help>HELP H|short-help|summary>SUMMARY m>MULTIPLE :p>PRIORITY' $@; then
  print -P "$USAGE"
  return 1
fi
help $HELP $SUMMARY $0 $USAGE $DESC $LONGHELP && return

if [[ -z "$PRIORITY" ]]; then
  [[ "$(hostname)" = "mredson" ]] && PRIORITY='eDP-1 HDMI-2 DP-2 HDMI-1 DP-1'
fi
[[ "$MULTIPLE" = "false" ]] && RESOLUTION=(${(Oa)RESOLUTION}) &&  PRIORITY=(${(Oa)=PRIORITY}) || PRIORITY=($=PRIORITY)

# GET LIST OF MONITORS
local MONITORS=$(xrandr -q | sed -n '
  s/^\([^ ]*\) \(connected\).*/\1/p
  s/^\([^ ]*\) \(disconnected\).*/--output \1 --off/p
  s/^ *\([0-9]*x[0-9]*\)[^+]*[+][^+]*$/\1/p
')
MONITORS=(${(f)MONITORS})  # (f) split at \n

# Look for the primary monitor
local ITEM IDX PRIMARY PRIMARY_RESOLUTION
for ITEM in $PRIORITY; do
  IDX=${MONITORS[(i)${ITEM}]}
  if [[ $IDX -le $#MONITORS ]]; then
    PRIMARY=$MONITORS[$IDX]

    [[ -z "$RESOLUTION[1]" ]] && RESOLUTION[1]=("$MONITORS[$((IDX+1))]")
    MONITORS[$((IDX+1))]=()
    PRIMARY_RESOLUTION=$RESOLUTION[1]

    # Build command
    MONITORS[$IDX]=("--output $PRIMARY --mode $RESOLUTION[1] --scale 1x1 --primary")
    RESOLUTION[1]=()
    break
  fi
done


# Setup other screens
IDX=1
while [[ $IDX -le $#MONITORS ]]; do
  if [[ ! "$MONITORS[$IDX]" =~ "--output" ]]; then
    [[ -z "$RESOLUTION[1]" ]] && RESOLUTION[1]=("$MONITORS[$((IDX+1))]")
    MONITORS[$((IDX+1))]=()

    # Build command
    local AUX=$MONITORS[$IDX]
    if [[ "$MULTIPLE" = "true" ]]; then
      MONITORS[$IDX]=("--output $MONITORS[$IDX] --mode $RESOLUTION[1] --scale 1x1 --left-of $PRIMARY")
    else
      MONITORS[$IDX]=("--output $MONITORS[$IDX] --mode $RESOLUTION[1] --scale-from $PRIMARY_RESOLUTION --same-as $PRIMARY")
    fi
    PRIMARY=$AUX
  fi
  ((IDX+=1))
done

xrandr $=MONITORS
feh --bg-scale $HOME/usr/img/arch/wallpaper
