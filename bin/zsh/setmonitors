#!/bin/zsh

autoload +X parse_cmdline help err war

local USAGE="%Busage:%b $0 [option]"
local DESC="Set resolution and positon of multiple monitors in X."
local LONGHELP=$(<<END
Default behaviour is to check all connected monitors and set them to their
preferred behaviour. This can be changed with the available options:
  %B-s%b
      Single mode: This is default when a single monitor is connected. If
      multiple options are available, assume the first one that is not the
      laptop screen, useful for a TV setup.
  %B-x%b
      Clone mode: All screens will have the same output. Resolution is scaled
      for different resolution monitors.

%BKNOWN ISSUES%b
  This script has only been tested with a maximum of two available monitors.
  It may result in unexpected behaviour when using more monitors.
END
)

local HELP=false
local SUMMARY=false
local SINGLE=false
local CLONE=false
local -a CONNECTED
local -a DISCONNECTED
if ! parse_cmdline 'h|help|long-help>HELP H|short-help|summary>SUMMARY s>SINGLE x>CLONE' $@; then
  print -P "$USAGE"
  return 1
fi
help $HELP $SUMMARY $0 $USAGE $DESC $LONGHELP && return

# Find out available screens
CONNECTED=($(xrandr -q | grep -w connected | cut -f1 -d' '))
DISCONNECTED=($(xrandr -q | grep -w disconnected | cut -f1 -d' '))
[[ $#CONNECTED -eq 1 ]] && SINGLE=true

# Check commandline
if [[ "$SINGLE" = "true" && "$CLONE" = "true" ]]; then
  war "Warning: Single mode used, -x option ignored."
fi

if [[ "$SINGLE" = true ]]; then
  # SINGLE MODE: If only one screen connected or if single argument is given
  echo "SINGLE MODE"

  # more than 1 connected, assume external instead of primary
  [[ $#CONNECTED -ne 1 ]] && CONNECTED+=${CONNECTED[1]} && CONNECTED[1]=()

  ARGUMENTS=$(echo "--output "${^CONNECTED[2,-1]}" --off" "--output "${^DISCONNECTED}" --off" "--output ${CONNECTED[1]} --auto --primary")
  xrandr $=ARGUMENTS
else
  # DUAL MODE: Automatic is more than one screen is connected
  echo "DUAL MODE"

  ARGUMENTS=$(echo "--output "${^CONNECTED[3,-1]}" --off" "--output "${^DISCONNECTED}" --off" "--output ${CONNECTED[1]} --auto --primary --output ${CONNECTED[2]} --auto --right-of ${CONNECTED[1]}")
  xrandr $=ARGUMENTS
fi

# Wait a little bit to restart Awesome WM (fix background)
if [[ -n "$(ps -Af | grep -o -w ".*awesome" | grep -v grep)" ]]; then
  sleep 1
  echo 'awesome.restart()' | awesome-client >/dev/null 2>&1
fi

# clone (in case we need it someday)
# xrandr --output $PRIMARY --auto --output $SECONDARY --auto --same-as $PRIMARY --scale (x1/x2)x(y1/y2)
