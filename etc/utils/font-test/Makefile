# paths
ROOTDIR := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))
DOCSDIR := $(ROOTDIR)/tex
PLTSDIR := $(ROOTDIR)/asy

vpath %.asy $(PLTSDIR)
vpath %.tex $(DOCSDIR)
vpath %.out $(DOCSDIR)

# files and targets
DOCS    := $(patsubst main_%.tex, %, $(notdir $(wildcard $(DOCSDIR)/main_*.tex)))
PLTS    := $(basename $(notdir $(wildcard $(PLTSDIR)/*.asy)))

DOCSpdf := $(DOCS:=.pdf)
DOCSout := $(DOCS:%=$(DOCSDIR)/%.out)
DOCSdep := $(DOCS:%=$(DOCSDIR)/%.dep)
PLTSout := $(foreach ext, .pdf .eps .tex i.pdf, $(PLTS:%=$(DOCSDIR)/%_asy$(ext)))
PLTSdep := $(ROOTDIR)/.depends

# functions
interactive  := $(if $(strip $(MAKE_TERMOUT)$(MAKE_TERMERR)),1,)
ifdef interactive
    tbold    := [1m
    tnormal  := [m
    tcolor   := [32m
    tnocolor := [39m
endif
msg           = $(info $(tbold)>>> $(strip $1)$(tnormal))
quote         = $(tcolor)'$(strip $1)'$(tnocolor)

# programs
SHELL       := /bin/sh
CD          := cd
MV          := mv
MKDIR       := mkdir
ASY         := asy
LATEX       := xelatex
ASYFLAGS    := -nosafe -tex xelatex
LATEXFLAGS  := -shell-escape -recorder -file-line-error -interaction=nonstopmode $(LATEXFLAGS)
GHOSTSCRIPT := gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -dAutoRotatePages=/None
AWK         := awk -i inplace

# define latexmk commandline
texcmd      = latexmk -jobname='$2' -$(LATEX) -latexoption='$(LATEXFLAGS)' -MP -deps-out='$(subst main_,,$(1:tex=dep))' '$1'
latexmk     = $(ROOTDIR)/latexit $(if $(VERBOSE),-v,) $(if $(interactive),,--no-color) $(texcmd)

ifeq (,$(shell command -v $(firstword $(filter $(subst =,,$(latexmk)),$(latexmk)));))
    latexmk = max_print_line=10000 $(texcmd)
endif

# GENERAL RULES ###############################################################
default: $(DOCSpdf)
.PHONY: default

# make a directory for output latex source files
$(DOCSout):
	@$(MKDIR) $@

# copy plots from PLTSDIR to DOCSDIR when necessary
$(PLTSout): $(DOCSDIR)/%: $(PLTSDIR)/%
	@$(MV) '$<' '$@'
.INTERMEDIATE: $(subst $(DOCSDIR)/,$(PLTSDIR)/,$(PLTSout))
.SECONDARY: $(PLTSout)

$(PLTSdep): $(ROOTDIR)/makedepend
	@$(call msg, Updating dependencies...)
	@$< -d $(DOCSDIR) -p $(PLTSDIR) -o $@ $(DOCS)

# LATEX RULES #################################################################
# latex compilation: .tex => .pdf .bbl
%.pdf: main_%.tex | %.out
	@$(call msg, Latexing document $(call quote, $(notdir $*))...)
	@$(CD) '$(firstword $|)' && $(call latexmk,$<,$*)
	@$(MV) '$(firstword $|)/$*.pdf' '$@'
%.pdf: export TEXINPUTS=.:$(dir $<):
%.pdf: export BIBINPUTS=.:$(dir $<):
%.pdf: export BSTINPUTS=.:$(dir $<):

# ASYMPTOTE RULES #############################################################
# standalone pdf/eps file
%_asy.pdf %_asy.eps: %.asy
	@$(call msg, Making asymptote figure $(call quote, $(notdir $*))...)
	@$(ASY) $(ASYFLAGS) -outformat $(subst .,,$(suffix $@)) -o '$(notdir $@)' -cd '$(dir $<)' '$(notdir $<)'

# tex/pdf pair of files
%_asy.tex %_asyi.pdf: %_asy.ilt;
%_asy.ilt: %.asy
	@$(call msg, Making inline asymptote figure $(call quote, $(notdir $*))...)
	@$(ASY) $(ASYFLAGS) -inlinetex -o '$(notdir $(basename $@)).tex' -cd '$(dir $<)' '$(notdir $<)'
	@$(GHOSTSCRIPT) -sOutputFile='$(basename $@)i.pdf' $$(ls '$(basename $@)_'*.pdf | sort -V)
	@$(AWK) -F '{|}|_asy_' '/^\\i/ { sub(/{.*}/, "[page="$$3+1"]{"$$2"_asyi}") } { print }' '$(basename $@).tex'
	@$(RM) $(foreach ext, .tex.pre _*.pdf, '$(basename $@)'$(ext))

# CLEANUP RULES ###############################################################
# cleanup plots
cleanasy:
	@$(call msg, Cleaning up asymptote figure files...)
	@$(RM) $(PLTSout)
.PHONY: cleanasy

# clean intermediate files generated by latexmk, leaving final targets and asymptote
cleanbuild:
	@$(call msg, Cleaning up intermediate files...)
	@$(RM) -r $(DOCSout)
.PHONY: cleanbuild

# clean intermediate files and final targets, leaving asymptote figures
clean: cleanbuild
	@$(call msg, Cleaning up target files...)
	@$(RM) $(DOCSpdf)
.PHONY: clean

# clean everything, including asymptote and dependency files
cleanall: clean cleanasy
	@$(call msg, Cleaning up dependecy files...)
	@$(RM) -r $(DOCSdep) $(PLTSdep)
.PHONY: cleanall

# if MAKECMDGOALS is not 'clean*' include dependencies to Makefile:
ifneq ($(sort $(patsubst clean%,clean,$(MAKECMDGOALS))),clean)
    -include $(PLTSdep) $(wildcard $(DOCSdep))
endif
